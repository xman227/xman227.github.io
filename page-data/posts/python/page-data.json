{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/python",
    "result": {"pageContext":{"currentCategory":"python","categories":["All","python","STUDY","회고"],"edges":[{"node":{"id":"415a1371-70ff-53f9-add9-b28568da2f28","excerpt":"😊 파이썬 VSCODE & 아나콘다 가상 환경 설정 1. VS code 확장팩 아래의 것을 Extension 에서 설치할 것 다 몸에 좋은 것들이니까 일단 한 번 잡숴봐. Python Python type hint Python extended Python Docstring Generator Path Autocomplete indent-rainbow 2. 가상환경 설정 및 저장 1.  로 가상환경 개수 확인 가능  2.  로 가상환경 제작 가능 test 라는 이름의 환경을 파이썬 3.7 로 제작해 만들겠다! 만든 가상환경에 접속하기 / 나오기  가상환경에 들어가면 앞 부분에 괄호가 뜬다  3. 가상환경에서 패키지 설치하기 해당 링크에서 검색 가능  가상환경에 들어간 뒤 링크에 나온 코드 붙여넣기  4. 패키지 정리 env.yml yml 파일은 어떤 패키지들이 들어가는지 알려주는 확장자 파일이다. 파이썬 말고도 flutter 나 JS 등 의존성 패키지 등을 알려주는 역할을 하니까 다음…","fields":{"slug":"/python_env/"},"frontmatter":{"categories":"python","title":"파이썬 VSCODE & 아나콘다 가상 환경 설정","date":"January 15, 2023"}},"next":{"fields":{"slug":"/python_numpy/"}},"previous":null},{"node":{"id":"a30d1ae5-983a-5644-bb25-326487b527ae","excerpt":"선형대수 기초 및 numpy 적용 행렬의 계산, 종류, numpy 내부 메서드를 다룬다. 1. 행렬의 계산 행렬  행렬 + 행렬  스칼라 * 행렬 : 각 자리마다 스칼라를 곱한다  행렬 * 행렬  A 의 열 값과 B 의 행 값이 같아야 한다 → A의 행 , B의 열 을 가진 새로운 행렬 탄생 dot product / 내적 이라고도 표현한다. 그림을 보면, A(4,2) 와 B(2,3) 이 만나 (4,3) 이 된다. 곱은 이렇게 이루어진다. GIF 2022-08-08 오후 1-32-17.gif  다음의 계산을 2 x 2 번 반복해서 2열 2행의 값이 나온다, 2. 행렬의 종류 전치 행렬 : 행과 열이 바뀐 행렬  전치행렬의 성질  영행렬  R 은 실수(real) 단위 행렬 : 대각선만 1인 행렬 기호는 I, E 둘 다 쓴다.  대각 행렬 : 대각선만 특정 수로 채워진 행렬 (특정 수는 행마다 다를 수 있음. )  3. matmul 과 dot 의 차이  → 다시 말해서  : 맨 마지막 …","fields":{"slug":"/python_numpy/"},"frontmatter":{"categories":"python","title":"선형대수와 넘파이","date":"January 10, 2023"}},"next":{"fields":{"slug":"/python_re/"}},"previous":{"fields":{"slug":"/python_env/"}}},{"node":{"id":"ee3f2374-e7be-5ada-b699-6495362dfb81","excerpt":"Re 1. 기초 문법 [ ]\n이 안에있는건 그대로 들어간다 [a-zA-Z] 알파벳 전부 [0-10] 숫자 전부 [.?,!] 이건그냥 쓴거 그대로를 의미한다 a.b 여기서 .은 모든 문자를 의미함\n대신 문자가 하나라도 들어는 가야함 a* b 이거는 바로 앞 문자 a 가 무한대로 반복된다는 의미 이건 a가 0번 반복되는것도 포함이다 ca* b 이런것도 a 만 포함하는거다 c는 제외다. ca+t 이거는 최소 1번 이상은 반복해야 한다 {} 이거는 반복횟수 고정 a{m,n} 이거는 a가 m~n번만 반복해야 한다. 그런의미에서 a* 는 a{0,} 와 같고 a+ 는 a{1,} 와 같다 특정 반복수 n 은 a{n} 으로 하면 된다 ? 는 {0,1} 을 의미한다. ca?t 은 a가 없거나 1번만 있으면 된다. ^ 문자열의 처음  , ^python : 무조건 시작이 python 이어야 함 문자열의 마지막  python $ \\d 숫자와 매치  \\D 반대 \\s 공백과 매치 [ \\t\\n\\r\\f\\v] 와…","fields":{"slug":"/python_re/"},"frontmatter":{"categories":"python","title":"Re 정규화 라이브러리 사용법","date":"June 01, 2022"}},"next":{"fields":{"slug":"/DML_AI6/"}},"previous":{"fields":{"slug":"/python_numpy/"}}},{"node":{"id":"164e3337-bd6f-55fb-8feb-932bec92dc93","excerpt":"빅데이터 핸들링의 필수, 병렬 컴퓨팅 동시성과 병렬성 동시성 : Concurrency 병렬성 : Parallelism 멀티 태스킹에는 위의 2가지 방식있다. 동시성 : 하나의 processor 가 남는 시간동안 다른 task 를 동시에 수행 다시말해, 특정 순간에는 1가지 task 를 하겠지만, 다음 task 로 넘어가는데 시간이 걸리게 되면 다른 task 를 수행하도록 한다. 병렬성 : 여러 processor 가 각자 task 를 동시에 수행 다시 말해, 병렬성을 가진 processor 가 동시성을 가지고 일할 수 있다. 예를 들어, 라면을 조리하려면 물을 끓여야 하는데. processor 는 불을 켜고 물이 끓기를 기다려야 한다. 이처럼 대기해야 하는 상황을 ‘bound’ 상태 라고 한다. bound 상태에 그저 대기만 하고 있는 방식을 Syncronzized, 동기 방식이라고 한다. bound 상태에 다른 일을 처리하는 방식을 Asynchronous 비동기 방식이라고 한다. …","fields":{"slug":"/python_tasking/"},"frontmatter":{"categories":"python","title":"파이썬 함수 병렬 처리","date":"February 23, 2022"}},"next":{"fields":{"slug":"/DML_recommend/"}},"previous":{"fields":{"slug":"/NLP_1/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}