{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/python_tasking/",
    "result": {"data":{"cur":{"id":"164e3337-bd6f-55fb-8feb-932bec92dc93","html":"<h1 id=\"빅데이터-핸들링의-필수-병렬-컴퓨팅\" style=\"position:relative;\"><a href=\"#%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%B8%EB%93%A4%EB%A7%81%EC%9D%98-%ED%95%84%EC%88%98-%EB%B3%91%EB%A0%AC-%EC%BB%B4%ED%93%A8%ED%8C%85\" aria-label=\"빅데이터 핸들링의 필수 병렬 컴퓨팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빅데이터 핸들링의 필수, 병렬 컴퓨팅</h1>\n<h2 id=\"동시성과-병렬성\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1\" aria-label=\"동시성과 병렬성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성과 병렬성</h2>\n<p>동시성 : Concurrency</p>\n<p>병렬성 : Parallelism</p>\n<p>멀티 태스킹에는 위의 2가지 방식있다.</p>\n<p>동시성 : 하나의 processor 가 남는 시간동안 다른 task 를 동시에 수행</p>\n<p>다시말해, 특정 순간에는 1가지 task 를 하겠지만, 다음 task 로 넘어가는데 시간이 걸리게 되면 다른 task 를 수행하도록 한다.</p>\n<p>병렬성 : 여러 processor 가 각자 task 를 동시에 수행</p>\n<blockquote>\n<p>다시 말해, 병렬성을 가진 processor 가 동시성을 가지고 일할 수 있다.</p>\n</blockquote>\n<p>예를 들어, 라면을 조리하려면 물을 끓여야 하는데.<br>\nprocessor 는 불을 켜고 물이 끓기를 기다려야 한다.</p>\n<p>이처럼 대기해야 하는 상황을 ‘bound’ 상태 라고 한다.</p>\n<p>bound 상태에 그저 대기만 하고 있는 방식을 Syncronzized, 동기 방식이라고 한다.<br>\nbound 상태에 다른 일을 처리하는 방식을 Asynchronous 비동기 방식이라고 한다.</p>\n<hr>\n<h2 id=\"process-thread--profiling\" style=\"position:relative;\"><a href=\"#process-thread--profiling\" aria-label=\"process thread  profiling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>process, thread , profiling</h2>\n<h3 id=\"process\" style=\"position:relative;\"><a href=\"#process\" aria-label=\"process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process</h3>\n<p>하나의 프로그램을 생성할 때, 운영체제는 하나의 프로세스 를 생성한다.</p>\n<p>프로세스는 프로그램을 작동시키면서 일어나는 메모리상의 작업 단위를 의미한다.</p>\n<p>하나의 프로세스는 CPU , 메모리(Ram), 디스크 및 자료구조를 이용하는데,\n그 과정에서 메모리는 여러 번 쓰이게 된다.</p>\n<h3 id=\"thread\" style=\"position:relative;\"><a href=\"#thread\" aria-label=\"thread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thread</h3>\n<p>thread 는 process 내부에 있는 또 각각의 작업단위를 의미한다</p>\n<p>헬스를 하는 <code class=\"language-text\">program</code> 에서, 운동선수라는 <code class=\"language-text\">processor</code> 는 스쿼트, 레그프레스, 레그 컬 등의 <code class=\"language-text\">thread</code> 를 수행한다.</p>\n<p>헬스로 계속 비유를 들어 보겠다.</p>\n<p>운동선수들끼리 헬스장 자체를 공유할 수는 있지만, 하나의 렉 을 공유할 수는 없다.</p>\n<blockquote>\n<p>다시말해, <code class=\"language-text\">thraed</code> 마다 전용 메모리 공간 <code class=\"language-text\">head</code> 을 가진다.</p>\n</blockquote>\n<h3 id=\"profiling\" style=\"position:relative;\"><a href=\"#profiling\" aria-label=\"profiling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>profiling</h3>\n<p>사건수사 프로파일링. 들어본적 있을 것이다.<br>\n그 사건의 일거수 일투족을 들여다보는 것을 의미한다.</p>\n<p>컴퓨터 내부의 프로파일링도 똑같다.</p>\n<p>프로그램 코드 내부에서</p>\n<ol>\n<li>어느 부분이 느린지</li>\n<li>어디서 RAM을 많이 사용하는지</li>\n</ol>\n<p>확인할 수 있다.</p>\n<p>파이썬에서도 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> timeit <span class=\"token comment\"># 프로파일링 라이브러리</span>\n        \n<span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    l <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    t <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">f4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">f5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">f6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">f7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s_comp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">f8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    l_comp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    \n\nt1 <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token string\">\"f1()\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"from __main__ import f1\"</span><span class=\"token punctuation\">)</span>\nt2 <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token string\">\"f2()\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"from __main__ import f2\"</span><span class=\"token punctuation\">)</span>\nt3 <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token string\">\"f3()\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"from __main__ import f3\"</span><span class=\"token punctuation\">)</span>\nt4 <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token string\">\"f4()\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"from __main__ import f4\"</span><span class=\"token punctuation\">)</span>\nt5 <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token string\">\"f5()\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"from __main__ import f5\"</span><span class=\"token punctuation\">)</span>\nt6 <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token string\">\"f6()\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"from __main__ import f6\"</span><span class=\"token punctuation\">)</span>\nt7 <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token string\">\"f7()\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"from __main__ import f7\"</span><span class=\"token punctuation\">)</span>\nt8 <span class=\"token operator\">=</span> timeit<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token string\">\"f8()\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"from __main__ import f8\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set               :\"</span><span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list              :\"</span><span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tuple             :\"</span><span class=\"token punctuation\">,</span> t3<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string            :\"</span><span class=\"token punctuation\">,</span> t4<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set_add           :\"</span><span class=\"token punctuation\">,</span> t5<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list_append       :\"</span><span class=\"token punctuation\">,</span> t6<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set_comprehension :\"</span><span class=\"token punctuation\">,</span> t5<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list_comprehension:\"</span><span class=\"token punctuation\">,</span> t6<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">set               : 1.690346003999366\nlist              : 0.7587415179996242\ntuple             : 0.7320455680001032\nstring            : 0.4020238100001734\nset_add           : 5.726110922999396\nlist_append       : 5.244985264999741\nset_comprehension : 5.7903866610004116\nlist_comprehension: 5.160655052999573</code></pre></div>\n<p>0부터 100까지의 수를 각 자료구조에 담는 시간을 세어 보았다.</p>\n<p>이렇게 함수의 성능을 측정할 수 있다.\n다만 이건 프로파일링을 최 단순화 한 것이다.</p>\n<p>원래는 코드별 들어가는 Ram 의 크기나 성능까지 측정한다.</p>\n<h2 id=\"multi-tasking\" style=\"position:relative;\"><a href=\"#multi-tasking\" aria-label=\"multi tasking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi-tasking</h2>\n<p>단순히 말해 우리는 병렬화, 또는 동시화 하기 위해서 자원을 up 할 수도 있고,<br>\n자원을 out (확장) 할 수도 있다.</p>\n<p>Scale up - 한 대의 컴퓨터 성능 향상\nScale out - 한 대에서 여러대로 컴퓨터 개수를 늘려 한대처럼 사용</p>\n<h2 id=\"실습\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5\" aria-label=\"실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습</h2>\n<h3 id=\"thread-1\" style=\"position:relative;\"><a href=\"#thread-1\" aria-label=\"thread 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n\nStopped <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">,</span> sleep_sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    \n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> Stopped<span class=\"token punctuation\">:</span>          \n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do '</span><span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">)</span>      \n        sleep<span class=\"token punctuation\">(</span>sleep_sec<span class=\"token punctuation\">)</span> \n        \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'retired..'</span><span class=\"token punctuation\">)</span>         \n        \n        \nt <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>worker<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'work'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    \nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">do  work\ndo  work\ndo  work</code></pre></div>\n<p>원래는 하나의 코드가 있으면 작동중에 다른 것에 영향을 받지 않는다.<br>\n다만 현재 <code class=\"language-text\">Thread</code> 메서드를 통해 함수를 시작했다.</p>\n<p><code class=\"language-text\">Thread</code> 에서 worker 메서드를 시작시켰고, 함수의 인자는 work, 2 가 들어갔다.</p>\n<p>이 작업이 끝나려면 <code class=\"language-text\">Stopped = True</code> 가 되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Stopped <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>    \n\nt<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">retired..\nfinish</code></pre></div>\n<p>이와 같이 <code class=\"language-text\">join</code> 메서드를 통해 같은 <code class=\"language-text\">thread</code> 에서 작업을 진행시켰고\n상단의 무한루프를 중단 시킬 수가 있다.</p>\n<h3 id=\"multi---process\" style=\"position:relative;\"><a href=\"#multi---process\" aria-label=\"multi   process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>multi - process</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> multiprocessing <span class=\"token keyword\">as</span> mp\n\np <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span><span class=\"token string\">'들어갈 프로그램/함수'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수의 인자'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 프로세스 시작</span>\np<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 실제 종료까지 기다림 (필요시에만 사용)</span>\np<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 프로세스 종료</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">fitness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exercising...'</span><span class=\"token punctuation\">)</span>\n\np <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>fitness<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">delivering...</code></pre></div>\n<p>멀티 프로세스도 <code class=\"language-text\">thread</code> 와 동일하게 구현가능하다</p>\n<hr>\n<h2 id=\"실제-코딩-시-적용방법\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-%EC%BD%94%EB%94%A9-%EC%8B%9C-%EC%A0%81%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"실제 코딩 시 적용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 코딩 시 적용방법</h2>\n<p>결국 우리가 이런 걸 하는 이유는 더 효율적이고 빠른 프로그램을 만들 수 있기 때문이다.</p>\n<p>그런데 모든 함수마다 이렇게 병렬처리를 해주는 게 더 귀찮고 시간이 많이든다.</p>\n<p>때문에 파이썬에서는 이 병렬처리 및 multi-tasking 을 자동으로 해주는 모듈이 있다.</p>\n<p><code class=\"language-text\">concurrent.futures</code> 이것이다.</p>\n<p><a href=\"https://docs.python.org/ko/3.7/library/concurrent.futures.html\">공식문서</a></p>\n<p>만약 병렬로 처리하고 싶은 코드가 있다면 아래와 같은 코드에</p>\n<p>병렬을 원하는 함수를 <code class=\"language-text\">func</code> 에 넣어 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> concurrent\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> concurrent<span class=\"token punctuation\">.</span>futures<span class=\"token punctuation\">.</span>ProcessPoolExecutor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> executor<span class=\"token punctuation\">:</span>\n        \n        <span class=\"token keyword\">for</span> output <span class=\"token keyword\">in</span> executor<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span> func <span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># data 를 func 로 처리.</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d is prime: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#모든 sequence 데이터가 동시처리됨</span>\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1\">동시성과 병렬성</a></p>\n</li>\n<li>\n<p><a href=\"#process-thread--profiling\">process, thread , profiling</a></p>\n<ul>\n<li><a href=\"#process\">Process</a></li>\n<li><a href=\"#thread\">Thread</a></li>\n<li><a href=\"#profiling\">profiling</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#multi-tasking\">Multi-tasking</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8B%A4%EC%8A%B5\">실습</a></p>\n<ul>\n<li><a href=\"#thread-1\">thread</a></li>\n<li><a href=\"#multi---process\">multi - process</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%A4%EC%A0%9C-%EC%BD%94%EB%94%A9-%EC%8B%9C-%EC%A0%81%EC%9A%A9%EB%B0%A9%EB%B2%95\">실제 코딩 시 적용방법</a></p>\n</li>\n</ul>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"></code></pre></div>","excerpt":"빅데이터 핸들링의 필수, 병렬 컴퓨팅 동시성과 병렬성 동시성 : Concurrency 병렬성 : Parallelism 멀티 태스킹에는 위의 2가지 방식있다. 동시성 : 하나의 processor 가 남는 시간동안 다른 task 를 동시에 수행 다시말해, 특정 순간에는 1가지 task 를 하겠지만, 다음 task 로 넘어가는데 시간이 걸리게 되면 다른 task 를 수행하도록 한다. 병렬성 : 여러 processor 가 각자 task 를 동시에 수행 다시 말해, 병렬성을 가진 processor 가 동시성을 가지고 일할 수 있다. 예를 들어, 라면을 조리하려면 물을 끓여야 하는데. processor 는 불을 켜고 물이 끓기를 기다려야 한다. 이처럼 대기해야 하는 상황을 ‘bound’ 상태 라고 한다. bound 상태에 그저 대기만 하고 있는 방식을 Syncronzized, 동기 방식이라고 한다. bound 상태에 다른 일을 처리하는 방식을 Asynchronous 비동기 방식이라고 한다. …","frontmatter":{"date":"February 23, 2022","title":"파이썬 함수 병렬 처리","categories":"Python","author":"하성민","emoji":"👩‍👩‍👦‍👦"},"fields":{"slug":"/python_tasking/"}},"next":{"id":"90600ba1-cdb3-50fe-ae9b-1fd1818b5dac","html":"<h1 id=\"-deep-learning-이용-분야----추천-시스템\" style=\"position:relative;\"><a href=\"#-deep-learning-%EC%9D%B4%EC%9A%A9-%EB%B6%84%EC%95%BC----%EC%B6%94%EC%B2%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-label=\" deep learning 이용 분야    추천 시스템 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤴 Deep Learning 이용 분야  - 추천 시스템</h1>\n<p>내 구글 아이디로 로그인 한 다음 유튜브에 들어가면<br>\n내가 보고싶은 영상들을 너무 누르고 싶게 보여준다</p>\n<p><img src=\"/c143663df037eb752f1d697589210631/youtube.png\" alt=\"youtube.PNG\"></p>\n<p>단순하게 생각해볼 수 있다.</p>\n<p><strong>아, 내가 지금까지 봤던 영상들을 기반으로 내가 보고싶어할 영상을 띄워주는구나.</strong></p>\n<p>여기서</p>\n<blockquote>\n<p>봤던 영상들을 기반으로</p>\n</blockquote>\n<p>에서 딥러닝 기법이 사용될 수 있다.</p>\n<hr>\n<h1 id=\"1-추천시스템이란\" style=\"position:relative;\"><a href=\"#1-%EC%B6%94%EC%B2%9C%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%B4%EB%9E%80\" aria-label=\"1 추천시스템이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 추천시스템이란?</h1>\n<p>업계 내 용어를 빌리자면</p>\n<p><code class=\"language-text\">user</code> 에게 <code class=\"language-text\">item</code> 을 제공하는 시스템.</p>\n<p>우리는 <code class=\"language-text\">user</code> 의 정보와  <code class=\"language-text\">item</code> 의 정보를 가지고 있다</p>\n<p>예를 들어 user 성민 이 있다고 한다면</p>\n<blockquote>\n<p>성민 : 25살 / 남성 / 인천 / 학생 / 인디음악선호</p>\n</blockquote>\n<p>아무리 간단해도 나이, 성별, 지역 등 여러 개의 정보를 가질 수 있다.</p>\n<p>item ‘Star is Born’ 이라는 영화가 있다고 한다면</p>\n<blockquote>\n<p>‘Star is Born’ : 인기도 5 / 액션도 5 / 로맨스 8 / 음악 10 / 리뷰평점  4.5 /</p>\n</blockquote>\n<p>등의 정보를 가질 수 있다.</p>\n<p>이 user 와 item 의 정보를 수치화(vectorize) 시켜 유사도(similarity) 를 판단한 후<br>\n유사도가 높은 것을 제공하는 것.</p>\n<p>이것이 바로 추천시스템이다.</p>\n<p>에? 너무 쉽지 않냐고? 이게 굳이 딥러닝이 필요하냐고?<br>\n이건 정말정말 단순하게 말한거다.</p>\n<p>우리는 2차원 평면 상에서 두 점 간의 거리를 구하는 방법을 알고 있다.<br>\n쉽잖아.</p>\n<p>$x = (a_1,a_2)$ ,  $y = (b_1,b_2)$\n일 때,</p>\n<p>$\\sqrt{(b_1-a_1)^2 +(b_2-b_1)^2}$</p>\n<p>자 그렇다면 3차원은? 4차원은?\n자 이래서 딥러닝이 필요한 것이다.</p>\n<h2 id=\"1-1-유사도-similarity-측정-방법\" style=\"position:relative;\"><a href=\"#1-1-%EC%9C%A0%EC%82%AC%EB%8F%84-similarity-%EC%B8%A1%EC%A0%95-%EB%B0%A9%EB%B2%95\" aria-label=\"1 1 유사도 similarity 측정 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1. 유사도 Similarity 측정 방법</h2>\n<p>다양한 유사도 측정 방법이 존재한다.</p>\n<ol>\n<li>유클리드 거리 계산법</li>\n<li>자카드 유사도</li>\n<li>피어슨 상관계수</li>\n<li>코사인 유사도 측정법</li>\n</ol>\n<p>그 중 하나인 코사인 유사도 측정법을 간단히 설명해 본다.</p>\n<p>코사인 유사도 측정법은 수학시간에 배운 코사인을 통해\n벡터 간 내적으로 두 점 간의 거리를 측정하는 방법이다.\n<img src=\"/d8784b6fb17a521cad3fc070adc7a943/cos.png\" alt=\"cos.PNG\"></p>\n<p>두 점 간의 벡터값을 구한 뒤</p>\n<p>방향이 완전히 동일한 경우는 1,<br>\n90도인 경우는 0.<br>\n정반대 방향인 경우는 -1 인 점에서 착안해</p>\n<p>-1 에서 1 사이의 값을 구해 유사도를 나타낸다.</p>\n<p>예를 들어</p>\n<p>$ a=(1,1,1)$ $b=(2,0,1)$<br>\n이라 할 때,</p>\n<p>벡터간 내적을 통해 유사도를 구할 수 있다.</p>\n<p><img scr=\"./similarity.PNG\"></img></p>\n<p><img src=\"/832a27657055531c63b295a011d26b31/similarity.gif\" alt=\"similarity.gif\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> numpy <span class=\"token keyword\">import</span> dot\n<span class=\"token keyword\">from</span> numpy<span class=\"token punctuation\">.</span>linalg <span class=\"token keyword\">import</span> norm\n\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cos_sim</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#cos simmilarlity</span>\n    <span class=\"token keyword\">return</span> dot<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>norm<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>norm<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ncos_sim<span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0.7745966692414834</code></pre></div>\n<p>이처럼 이 두 거리의 유사도는 0.77임을 보여준다</p>\n<h1 id=\"2-추천시스템의-종류\" style=\"position:relative;\"><a href=\"#2-%EC%B6%94%EC%B2%9C%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"2 추천시스템의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 추천시스템의 종류</h1>\n<p>추천시스템의 종류는 추천하는 방식으로 나눈다.</p>\n<ol>\n<li>콘텐츠 기반 필터링 ; Content Based Filtering</li>\n<li>협업 필터링 ; Collaborative Filtering\n<ol>\n<li>사용자기반</li>\n<li>아이템기반</li>\n<li>잠재요인 기반</li>\n</ol>\n</li>\n<li>Deep Learing 적용 방식</li>\n</ol>\n<p>Content based Filtering 은 말 그대로<br>\n그 내용 만의 유사성을 토대로 추천해준다.</p>\n<p>아바타 를 봤다면 그와 비슷한 특징(감독, 배우, 스토리, 장르) 등을 고려해\n아이언맨, 가디언즈 오브 갤럭시 등을 추천해주는 것이다.</p>\n<p>Collaborative Filtering 은 사용자 과거 행동을 기반으로 추천하는 방식이다.</p>\n<p>사용자 기반 : ” 당신과 비슷한 사람들은 이런 영상을 봅니다  ”<br>\n아이템 기반 : ” 이 영상을 본 다른 사람들은 이 영상도 봤습니다 ”\n잠재요인 기반 : ” 당신이 이 영상들을 이렇게 평가한걸 보니 이 영상은 높게 평가할 것 같습니다 ”</p>\n<p>잠재요인 기반은 행렬 인수분해 (Matrix Factorization) 를 통해 사용자가 평점을 매기는 요인(잠재요인)을 우리는 모르는 변수라고 가정하고 수치화(벡터화) 하여 새로운 영상들에 어떤 평점을 매길지 예측하는 방식이다.</p>\n<p>이 다양한 수학연산 혹은 계산을 위해 다양한 파라미터를 설정해 계산을 도출할 수 있고,<br>\n이 때 신경망게층 연산망, 즉, Deep Learning model 을 접목할 수 있다.</p>\n<h1 id=\"3-실제-추천-시스템\" style=\"position:relative;\"><a href=\"#3-%EC%8B%A4%EC%A0%9C-%EC%B6%94%EC%B2%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-label=\"3 실제 추천 시스템 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 실제 추천 시스템</h1>\n<p>Youtube 나 Netflix 는 추천에 아주 많은 것들을 고려한다.</p>\n<p>사용자의 구매 여부뿐만 아니라\n시청 시간, 웹사이트 체류 시간, 사이트 유입 경로, 시청과 구매까지 걸리는 시간 등 ..</p>\n<p>좋은 추천 시스템을 만들기 위해서는</p>\n<p>어떤 데이터를 써야 할 지,\n데이터 간 우선도와 가중치는 어떻게 두어야 하는지</p>\n<p>평가와 수정을 반복해야 한다.\n추천시스템에 머신러닝 딥러닝이 적용될 수도 있는 것이지 필수는 아니기 때문에<br>\n굳이 추천시스템을 위해 머신러닝부터 배워나갈 필요는 없다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-1-%EC%9C%A0%EC%82%AC%EB%8F%84-similarity-%EC%B8%A1%EC%A0%95-%EB%B0%A9%EB%B2%95\">1-1. 유사도 Similarity 측정 방법</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 21, 2022","title":"추천시스템","categories":"DeepML","author":"하성민","emoji":"🗺"},"fields":{"slug":"/DML_recommend/"}},"prev":{"id":"6d79397e-6ce5-58cd-bb09-adcf492b30f0","html":"<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>우리는 많은 문장들 속에서 살아간다.<br>\n한국어, 영어, 일본어, 중국어,, 영어 배워라 배워라 스트레스 받는것도 다<br>\n언어가 존재하기 때문이다.</p>\n<p>이렇게 일상에서 사용하는 언어를 <strong>자연어(Natural Language)</strong> 라고 부른다.</p>\n<p>반면에 우리가 쓰는 프로그래밍 언어는 <strong>기계어 또는 인공어(Artificial Language)</strong> 라고 부른다.</p>\n<p>(엄연히 따지면 자연어 안에 인공어가 속한다)</p>\n<p>프로그래밍 언어는 자연어보다 훨씬 명료하고 처리하기에 용이하여야 하므로<br>\n자연어와 다르게 문맥과 상관없이 항상 동일한 의미를 가진다.</p>\n<hr>\n<p>우리는 자연어를 처리해야 하기 때문에<br>\n사람이 하는 방식대로는 즉, 문맥을 이해하는 방식으로는<br>\n기계를 학습시키기가 어렵다.</p>\n<p>때문에, 단어들을 숫자로 매핑해 표현하는 머신러닝 기법 을 사용한다.<br>\n그렇다면 각 단어들의 의미를 기계들도 이해하고 연산할 수 있을 것이다.</p>\n<p><a href=\"http://w.elnn.kr/search/\">해당 블로그</a>에서는 그렇게 수치화된 단어들간의<br>\n계산을 시도해 볼 수 있다.</p>\n<p>이와 함께 단어를 어떻게 구분할 것인지(형태소? 단어?) 결정하는<br>\n<code class=\"language-text\">Toknization</code> 기법을 사용한다.</p>\n<h2 id=\"1-잡음이-많은-자연어\" style=\"position:relative;\"><a href=\"#1-%EC%9E%A1%EC%9D%8C%EC%9D%B4-%EB%A7%8E%EC%9D%80-%EC%9E%90%EC%97%B0%EC%96%B4\" aria-label=\"1 잡음이 많은 자연어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 잡음이 많은 자연어</h2>\n<p><img src=\"/fe59587a4cc89abb453737e1622d75b5/image1.png\"></img></p>\n<p>우리의 일상언어는 문맥이 있어야만 이해가 가능하다<br>\n위는 내가 친구들과 게임 약속을 잡을 때 나눈 대화이다.</p>\n<p>우선 어느정도의 오타가 존재하고, 주어 동사는 밥먹듯이 빼먹고 있다.<br>\n디코는 음성채팅 어플리케이션인 Discord의 줄임말이다.</p>\n<p>이러한 변형들이 자연어처리 모델 입장에서는 Noise(잡음) 이 된다.<br>\n따라서 우리가 모델을 학습시키기 위해선 이러한 잡음이 최대한 없는 데이터를 사용한다.</p>\n<p>(예를 들어 소설책, 뉴스기사 등)</p>\n<h3 id=\"잡음의-종류\" style=\"position:relative;\"><a href=\"#%EC%9E%A1%EC%9D%8C%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"잡음의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잡음의 종류</h3>\n<ol>\n<li>혼자서 두 세 번 전송하는 경우</li>\n<li>문장길이가 너무 짧거나 긴 경우</li>\n<li>문장 간격이 너무 긴 경우</li>\n<li>욕설 / 오타 가 많은 경우</li>\n</ol>\n<p>너무나도 많지만, 우선 우리가 그나마 정제할 수 있는 노이즈만 뽑자면 다음과 같다.</p>\n<ol>\n<li>문장부호</li>\n<li>대소문자 (영어)</li>\n<li>특수문자</li>\n</ol>\n<p>때문에 NLP 에서는 이렇게 정제할 수 있는 Noise 를\npreprocessing 하는 작업을 거친다.</p>\n<h2 id=\"2-preprocessing\" style=\"position:relative;\"><a href=\"#2-preprocessing\" aria-label=\"2 preprocessing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Preprocessing</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 1. 문장부호 구분</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pad_punctuation</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">,</span> punc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> punc<span class=\"token punctuation\">:</span>\n        sentence <span class=\"token operator\">=</span> sentence<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> p <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> sentence\n\nsentence <span class=\"token operator\">=</span> <span class=\"token string\">\"안녕, 내 글 읽어줘서 땡큐.\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pad_punctuation<span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># , ? ! . 가 들어간 부분 양쪽에 띄어쓰기 처리</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">안녕 ,  내 글 읽어줘서 땡큐 . </code></pre></div>\n<p>문장부호를 제거하지 않는 이유는 쉼표나 마침표 또한 일정한 의미를 가지고 있다고 판단하기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 2. 대소문자 처리</span>\n\nsentence <span class=\"token operator\">=</span> <span class=\"token string\">\"First, open the first chapter.\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">first, open the first chapter.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 3. 특수문자 제거</span>\n\n<span class=\"token keyword\">import</span> re <span class=\"token comment\">#단어 정규화 라이브러리</span>\n\nsentence <span class=\"token operator\">=</span> <span class=\"token string\">\"He is a ten-year-old boy.\"</span>\nsentence <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">\"([^a-zA-Z.,?!])\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> sentence<span class=\"token punctuation\">)</span> <span class=\"token comment\">#알파벳과 ! ? ,. 이 아닌 모든 문자는 공백으로 변환</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">He is a ten year old boy.</code></pre></div>\n<hr>\n<h2 id=\"3-embeddng\" style=\"position:relative;\"><a href=\"#3-embeddng\" aria-label=\"3 embeddng permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Embeddng</h2>\n<p>text를 정제했다면,  임베딩레이어 (<code class=\"language-text\">Embedding layer</code>)를 통해 단어의 분산 표현 (<code class=\"language-text\">Distributed represntation</code>) 을 구현한다.<br>\n분산표현은 단어의 속성 차원(<code class=\"language-text\">dim</code>) 을 우리가 임의로 지정하고, 그 <code class=\"language-text\">dim</code> 에 맞게 추상적인 속성을 구분해 표현하는 것을 의미한다.</p>\n<p>때문에 적절한 차원 수와 합당한 속성 값들이 들어간다면, 각 단어마다 적절한 의미의 유사도가 나타날 것이다.</p>\n<p>의미의 유사도는 <code class=\"language-text\">코사인 유사도</code> 를 통해 나타낸다.</p>\n<blockquote>\n<p>코사인 유사도 ( Cosine similarity )</p>\n</blockquote>\n<p>두 벡터 간의 코사인 각도를 이용해 구할 수 있는 두 벡터의 유사도, 다시 말 해 두 벡터(방향과 속도) 가 어느정도 유사한 지 찾는 계산</p>\n<p><img src=\"/5c5d5b0bb99a8f9840f66c02c02e0903/image2.png\"></img></p>\n<p>위의 그림처럼 동일한 속력 하에 방향이 반대면 -1, 90도면 0, 같은 방향이면 1 의 값을 가진다.<br>\n코사인 유사도는 -1에서 1 사이의 값을 지닌다.</p>\n<p>A와 B 의 코사인 유사도 계산식은 다음과 같다.</p>\n<p><img src=\"/6f4e5bb15c88af9e0b691b048eb41c8a/image3.png\"></img></p>\n<hr>\n<p>이 때, <code class=\"language-text\">dim</code>설정 후 나온 속성 값들의 모음을 <code class=\"language-text\">단어 사전</code> 이라 칭하는데,<br>\n이 단어사전을 제대로 작성하기 위해선 단어를 어떻게 쪼갤 것인지도 판단해야 한다.</p>\n<p>예를 들어보자</p>\n<p>나는 드디어 그녀와 사귀기로 했다</p>\n<p>라는 말이 있을 때, 어떻게 분리해야 할까?</p>\n<ol>\n<li>나, 는, 드디어, 그녀, 와, 사귀기로, 했다. # 조사 나눔</li>\n<li>나는, 드디어, 그녀와, 사귀기로, 했다. #띄어쓰기 나눔</li>\n<li>나,는, 드디어, 그녀, 와, 사귀기,로, 했,다. #형태소별 나눔</li>\n</ol>\n<p>문장을 나누었을 때 쪼개진 조각조각을 <code class=\"language-text\">Token</code> 이라 부른다.\n이것을 결정하는 방식이 <code class=\"language-text\">Tokenization</code> 이다.</p>\n<p>토큰화를 위한 여러가지 분석기들이 이미 개발되어 있다.</p>\n<p>그 종류별 차이점을 <a href=\"https://iostream.tistory.com/144\">해당 블로그</a> 에서 잘 설명해주고 있다.</p>\n<p>우리도 한 번 써보도록 하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> konlpy<span class=\"token punctuation\">.</span>tag <span class=\"token keyword\">import</span> Hannanum<span class=\"token punctuation\">,</span>Kkma<span class=\"token punctuation\">,</span>Komoran<span class=\"token punctuation\">,</span>Mecab<span class=\"token punctuation\">,</span>Okt\n\ntokenizer_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Hannanum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Kkma<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Komoran<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Mecab<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Okt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nkor_text <span class=\"token operator\">=</span> <span class=\"token string\">'제 이름은 하성민입니다. 헬스 트레이닝과 NLP에 흥미가 있습니다. 세상의 우울을 해결하고 싶습니다.'</span>\n\n<span class=\"token keyword\">for</span> tokenizer <span class=\"token keyword\">in</span> tokenizer_list<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[{}] \\n{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>tokenizer<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">,</span> tokenizer<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">(</span>kor_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Hannanum] \n[('저', 'N'), ('의', 'J'), ('이름', 'N'), ('은', 'J'), ('하성민입니', 'N'), ('이', 'J'), ('다', 'E'), ('.', 'S'), ('헬스', 'N'), ('트레이닝', 'N'), ('과', 'J'), ('NLP', 'F'), ('에', 'J'), ('흥미', 'N'), ('가', 'J'), ('있', 'P'), ('습니다', 'E'), ('.', 'S'), ('세상', 'N'), ('의', 'J'), ('우울', 'N'), ('을', 'J'), ('해결', 'N'), ('하고', 'J'), ('싶', 'P'), ('습니다', 'E'), ('.', 'S')]\n[Kkma] \n[('저', 'NP'), ('의', 'JKG'), ('이름', 'NNG'), ('은', 'JX'), ('하성', 'NNG'), ('민', 'NNG'), ('이', 'VCP'), ('ㅂ니다', 'EFN'), ('.', 'SF'), ('헬스', 'NNG'), ('트레이닝', 'NNG'), ('과', 'JC'), ('NLP', 'OL'), ('에', 'JKM'), ('흥미', 'NNG'), ('가', 'JKS'), ('있', 'VV'), ('습니다', 'EFN'), ('.', 'SF'), ('세상', 'NNG'), ('의', 'JKG'), ('우울', 'NNG'), ('을', 'JKO'), ('해결', 'NNG'), ('하', 'XSV'), ('고', 'ECE'), ('싶', 'VXA'), ('습니다', 'EFN'), ('.', 'SF')]\n[Komoran] \n[('제', 'XPN'), ('이름', 'NNG'), ('은', 'JX'), ('하성민', 'NNP'), ('이', 'VCP'), ('ㅂ니다', 'EF'), ('.', 'SF'), ('헬스', 'NNG'), ('트레이닝', 'NNG'), ('과', 'JC'), ('NLP', 'SL'), ('에', 'JKB'), ('흥미', 'NNG'), ('가', 'JKS'), ('있', 'VX'), ('습니다', 'EF'), ('.', 'SF'), ('세상', 'NNG'), ('의', 'JKG'), ('우울', 'NNG'), ('을', 'JKO'), ('해결', 'NNG'), ('하', 'XSV'), ('고', 'EC'), ('싶', 'VX'), ('습니다', 'EF'), ('.', 'SF')]\n[Mecab] \n[('제', 'NP+JKG'), ('이름', 'NNG'), ('은', 'JX'), ('하성민', 'NNP'), ('입니다', 'VCP+EF'), ('.', 'SF'), ('헬스', 'NNG'), ('트레이닝', 'NNG'), ('과', 'JC'), ('NLP', 'SL'), ('에', 'JKB'), ('흥미', 'NNG'), ('가', 'JKS'), ('있', 'VA'), ('습니다', 'EF'), ('.', 'SF'), ('세상', 'NNG'), ('의', 'JKG'), ('우울', 'NNG'), ('을', 'JKO'), ('해결', 'NNG'), ('하', 'XSV'), ('고', 'EC'), ('싶', 'VX'), ('습니다', 'EF'), ('.', 'SF')]\n[Okt] \n[('제', 'Noun'), ('이름', 'Noun'), ('은', 'Josa'), ('하성민', 'Noun'), ('입니다', 'Adjective'), ('.', 'Punctuation'), ('헬스', 'Noun'), ('트레이닝', 'Noun'), ('과', 'Josa'), ('NLP', 'Alpha'), ('에', 'Josa'), ('흥미', 'Noun'), ('가', 'Josa'), ('있습니다', 'Adjective'), ('.', 'Punctuation'), ('세상', 'Noun'), ('의', 'Josa'), ('우울', 'Noun'), ('을', 'Josa'), ('해결', 'Noun'), ('하고', 'Josa'), ('싶습니다', 'Verb'), ('.', 'Punctuation')]</code></pre></div>\n<p>뒤에 따라오는 알파벳은 해당 글자가 명사인지, 고유명사인지, 형용사인지 구분해주는 기호이다.</p>\n<p><a href=\"http://kkma.snu.ac.kr/documents/?doc=postag\">해당 블로그</a>에서 어떤 알파벳이 어떤 형태소를 나타내는지 표시해준다.<br>\n이 기호 또한 분석기마다 조금의 차이는 있지만 거의 비슷하다.</p>\n<p>내가 봤을 때는 Komoran 이 좀 정확한 것 같다.</p>\n<h3 id=\"이-외-embedding-방법\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EC%99%B8-embedding-%EB%B0%A9%EB%B2%95\" aria-label=\"이 외 embedding 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 외 Embedding 방법</h3>\n<ol>\n<li>BPE</li>\n</ol>\n<p>이처럼 Embedding layer 는 단어갯수 x 차원 수(n_dim) 의 가중치를 생성한다.</p>\n<p>단어갯수가 많을수록 사용되는 메모리가 많다고 볼 수 있다.<br>\n때문에 단어갯수를 줄여 저장하는 BPE (Byte Pair Encoding) 이나 그 응용 심화 단계인 WPM(Word Piece Model) 등이 사용되기도 한다.</p>\n<p>WPM 은 현재 공개되어 있지는 않고, 구글의 SentencePiece 라이브러리를 통해 전처리까지 해주는 고성능의 BPE 를 이용할 수 있다.<br>\n<a href=\"https://github.com/google/sentencepiece\">SentencePiece</a></p>\n<ol start=\"2\">\n<li>soynlp</li>\n</ol>\n<p>한국어 전용 라이브러리 이다. 토크나이저 외 추출, 형태소분석, 전처리도 가능하다.<br>\n특히 미등록단어(사전에 없는 신조어 등) 을 구분해낼 수 있는 능력을 갖추고 있다.</p>\n<p>예를 들어 <code class=\"language-text\">에스파</code> 라는 단어가 들어왔다면,\n에, 에스, 에스파 중 가장 쓰였을 확률이 높은 단어로 결정한다.</p>\n<hr>\n<h2 id=\"4-분산표현-임베딩의-학습종류\" style=\"position:relative;\"><a href=\"#4-%EB%B6%84%EC%82%B0%ED%91%9C%ED%98%84-%EC%9E%84%EB%B2%A0%EB%94%A9%EC%9D%98-%ED%95%99%EC%8A%B5%EC%A2%85%EB%A5%98\" aria-label=\"4 분산표현 임베딩의 학습종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 분산표현 임베딩의 학습종류</h2>\n<h3 id=\"1-word2vec\" style=\"position:relative;\"><a href=\"#1-word2vec\" aria-label=\"1 word2vec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Word2Vec</h3>\n<p>한 문장 안에 있는 단어들끼리에는 유사성이 더 있다 라는 가정에서 시작한 방식이다.\n<code class=\"language-text\">word2Vec</code> 은 CBOW(주변단어로 중간단어 예측) 학습방식과 Skip-gram(중간단어로 주변단어 예측) 학습방식이 존재한다.</p>\n<h3 id=\"2-fasttext\" style=\"position:relative;\"><a href=\"#2-fasttext\" aria-label=\"2 fasttext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Fasttext</h3>\n<p>하나의 어휘를 n-gram 으로 더 쪼개어 더 정확한 예측을 한다.</p>\n<h3 id=\"3-elmo\" style=\"position:relative;\"><a href=\"#3-elmo\" aria-label=\"3 elmo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. ELMo</h3>\n<p>동음이의어를 구분하지 못하는 word2Vec 의 단점을 보완했다.\n동음이의어를 구분하려면 그 주변의 문맥을 파악해야 하고, 이러한 특성이 반영된 임베딩을</p>\n<p>Contextualized Word Embedding 이라고 표현한다.</p>\n<p><img src=\"/14676ddd4510b651461ba8a936436cb2/image4.png\"></img></p>\n<p>이러한 방식은 임베딩값이 주변 단어에 따라 가변적인 속성을 띠게 되어\n배(boat, stomach) 가 쓰이는 맥락에 따라 다른 값을 표현한다.</p>\n<hr>\n<h2 id=\"5-정리\" style=\"position:relative;\"><a href=\"#5-%EC%A0%95%EB%A6%AC\" aria-label=\"5 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 정리</h2>\n<p>NLP 에서 데이터 전처리와 토큰화는 큰 비중을 차지한다.</p>\n<p>문장에 Noise 를 제거 <code class=\"language-text\">preprocessing</code> 하고,<br>\n제거한 문장을 적절히 <code class=\"language-text\">Tokenize</code> 하고,<br>\n분리한 Token 을 <code class=\"language-text\">word Embedding</code> 한다.</p>\n<p>Tokenize 과정에는 일반적으로 형태소 분석기를 사용한다.<br>\n대표적으로는 koNLP, SentencePiece 라이브러리 등을 사용한다.</p>\n<p>word Embdding 은 대표적으로 Word2Vec, FastText, ELMo 모델을 사용한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EC%9E%A1%EC%9D%8C%EC%9D%B4-%EB%A7%8E%EC%9D%80-%EC%9E%90%EC%97%B0%EC%96%B4\">1. 잡음이 많은 자연어</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A1%EC%9D%8C%EC%9D%98-%EC%A2%85%EB%A5%98\">잡음의 종류</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-preprocessing\">2. Preprocessing</a></p>\n</li>\n<li>\n<p><a href=\"#3-embeddng\">3. Embeddng</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B4-%EC%99%B8-embedding-%EB%B0%A9%EB%B2%95\">이 외 Embedding 방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EB%B6%84%EC%82%B0%ED%91%9C%ED%98%84-%EC%9E%84%EB%B2%A0%EB%94%A9%EC%9D%98-%ED%95%99%EC%8A%B5%EC%A2%85%EB%A5%98\">4. 분산표현 임베딩의 학습종류</a></p>\n<ul>\n<li><a href=\"#1-word2vec\">1. Word2Vec</a></li>\n<li><a href=\"#2-fasttext\">2. Fasttext</a></li>\n<li><a href=\"#3-elmo\">3. ELMo</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-%EC%A0%95%EB%A6%AC\">5. 정리</a></p>\n</li>\n</ul>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"></code></pre></div>","frontmatter":{"date":"March 15, 2022","title":"NLP 에서 데이터 전처리 및 토큰화란","categories":"NLP","author":"하성민","emoji":"😁"},"fields":{"slug":"/NLP_1/"}},"site":{"siteMetadata":{"siteUrl":"https://xman227.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/python_tasking/","nextSlug":"/DML_recommend/","prevSlug":"/NLP_1/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}